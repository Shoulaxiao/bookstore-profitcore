<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- jdbc配置 -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:conf/jdbc.properties</value>
                <value>classpath*:conf/redis.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <!-- dbcp数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--这里如果写成${jdbc.driver}，就会出现加载jdbc驱动失败的问题，暂时不清楚什么原因-->
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 连接池最大使用连接数 -->
        <property name="maxActive" value="20"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="1"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 连接池最大空闲 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="3"/>
        <!-- 自动清除无用连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 连接属性 -->
        <property name="connectionProperties" value="clientEncoding=UTF-8"/>
    </bean>

    <!-- mybatis的配置文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:conf/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath*: /mapper/*.xml"/>
    </bean>

    <!-- spring与mybatis整合配置，扫描所有dao 和所有mapper文件 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.shoulaxiao.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 5.事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--使用注释事务 -->
    <tx:annotation-driven  transaction-manager="transactionManager" />

<!--    &lt;!&ndash; redis数据源 &ndash;&gt;-->
<!--    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
<!--        &lt;!&ndash; 最大空闲数 &ndash;&gt;-->
<!--        <property name="maxIdle" value="${redis.maxIdle}" />-->
<!--        &lt;!&ndash; 最大空连接数 &ndash;&gt;-->
<!--        <property name="maxTotal" value="${redis.maxTotal}" />-->
<!--        &lt;!&ndash; 最大等待时间 &ndash;&gt;-->
<!--        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />-->
<!--        &lt;!&ndash; 返回连接时，检测连接是否成功 &ndash;&gt;-->
<!--        <property name="testOnBorrow" value="${redis.testOnBorrow}" />-->
<!--    </bean>-->
<!--    &lt;!&ndash; Spring-redis连接池管理工厂 &ndash;&gt;-->
<!--    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
<!--        &lt;!&ndash; IP地址 &ndash;&gt;-->
<!--        <property name="hostName" value="${redis.host}" />-->
<!--        &lt;!&ndash; 端口号 &ndash;&gt;-->
<!--        <property name="port" value="${redis.port}" />-->
<!--&lt;!&ndash;        <property name="password" value="${redis.password}" />&ndash;&gt;-->
<!--        &lt;!&ndash; 超时时间 默认2000&ndash;&gt;-->
<!--        <property name="timeout" value="${redis.timeout}" />-->
<!--        &lt;!&ndash; 连接池配置引用 &ndash;&gt;-->
<!--        <property name="poolConfig" ref="poolConfig" />-->
<!--        &lt;!&ndash; usePool：是否使用连接池 &ndash;&gt;-->
<!--        <property name="usePool" value="true"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; redis template definition &ndash;&gt;-->
<!--    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
<!--        <property name="connectionFactory" ref="jedisConnectionFactory" />-->
<!--        <property name="keySerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="valueSerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="hashKeySerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--        </property>-->
<!--        <property name="hashValueSerializer">-->
<!--            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />-->
<!--        </property>-->
<!--        &lt;!&ndash;开启事务  &ndash;&gt;-->
<!--        <property name="enableTransactionSupport" value="true"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;自定义redis工具类,在需要缓存的地方注入此类  &ndash;&gt;-->
<!--    <bean id="redisService" class="com.shoulaxiao.util.RedisClient">-->
<!--        <property name="redisTemplate" ref="redisTemplate" />-->
<!--    </bean>-->

</beans>